###########################################################
how to start:
nginx.conf:
http{
    ...    
    server {
        listen       8008;
        server_name  localhost;

        #charset koi8-r;
        #access_log  logs/host.access.log  main;

        location / { 
            root /home/aplian/webrtc_demo/one-to-one;
            index  index.html index.htm;
        }
        ...
    }
    ...
}

client:
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
web:
http:10.10.10.10:8008

ios:
pod install 
打开项目编译运行（需要一部手机）

###########################################################
流程整理:
1.Login:
    从服务器获取房间列表 和 房间里对应的用户列表;
    跳转到九宫格, 初始化本地视频, 并显示.
    -->  登录服务器
    {
        "messageType":"login",
        "userName":"loginName"
    }
    <--  服务器返回数据
    {
        "messageType":"login",
        "roomList":[
            {
                "roomId":"roomOne",
                "userList":[
                    "1111",
                    "1222",
                    "1333"
                ]
            },
            Object{...}
        ]
    }
2.Join And Offer:
    选择(或输入)房间, 
    如果房间不存在, 则创建房间, 并不转发offer.
    -->  加入房间(无则创建)
    {
        "messageType":"join",
        "roomId":"roomNew",
        "userName":"loginName"
    }
    <-- 加入成功返回数据
    {
        "messageType":"join",
        "roomId":"roomNew",
        "state": "exist|created",
        "userList": [ '2222', '1111' ]
    }
    给房间里除自己外, 所有的用户创建PeerConnection连接,
    获取本地offer. 通过服务器转发offer消息给房间里所有的在线用户.
    ---->  发送offer信息给远端用户, 添加到setLocalDescription
    {
        "messageType":"offer",
        "roomId":"roomNew",
        "fromUser":"1111",
        "toUser":"2222",
        "offer":Object{...}
    }
3.Answer:
    ---->  对方收到offer信息, 创建PeerConnection, 并返回answer
    {
        "messageType":"answer",
        "roomId":"roomNew",
        "fromUser":"2222",
        "toUser":"1111",
        "answer":Object{...}
    }
    <----  收到对方answer信息, 添加到setRemoteDescription
    ---->  返回answer给对方
    {
        "messageType":"answer",
        "roomId":"roomNew",
        "fromUser":"1111",
        "toUser":"2222",
        "answer":Object{...}
    }
4.Candidate:
    candidate信息同offer  <---->  answer
    <---->
    {
        "messageType":"candidate",
        "roomId":"roomNew",
        "fromUser":"1111",
        "toUser":"2222",
        "candidate":Object{...}
    }
5.Leave:
    退出房间, 
    关闭PeerConnection连接, 归还视频播放资源
    服务器不关闭websocket连接, 从房间列表中移除该用户
    -->  发给远端用户
    {
        "messageType":"leave",
        "roomId":"roomNew",
        "fromUser":"1111",
        "toUser":"2222"
    }
    ---->  接收到远端用户数据
    关闭PeerConnection连接, 归还视频播放资源
    从房间列表中移除该用户
6.Close:
    用户退出 connection close. 
    给房间里所有的用户发送leave信息
    从房间列表中移除该用户
    从websocket列表中移除该链接

服务端所有用户退出,房间销毁
###########################################################
